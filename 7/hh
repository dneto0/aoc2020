#!/usr/bin/env perl
# Copyright 2020 David Neto
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use Data::Dumper;

# Key is the bag colour name, e.g. 'vibrant bronze'
# Value is a reference to hash of pairs: key is bag name, value is number.
my %rules = ();

foreach my $line (<>) {
  chomp $line;
  if ($line =~ m/^(.*) bags contain\s+(.*)\./) {
    my ($outer,$contents) = ($1,$2);
    my %contents = ();
    if ($contents =~ m/no other/) {
      # nothing more
    } else {
      foreach my $inner (split(/ bags?,? */, $contents)) {
        if ($inner =~ m/(\d+)\s+(.+)/) {
          $contents{$2} = $1 + 0;
        }
      }
    }
    $rules{$outer} = {%contents};
  }
}
# Dump the rule set, to make sure you parsed the sample input correctly.
# print Dumper(\%rules);

# Invert the graph
# Key is contained bag, value is array ref of the kinds of bags that can
# contain it.
my %contained_by = ();
while (my ($outer, $inner_ref) = each %rules) {
  while (my ($inner, $count) = each %$inner_ref) {
    $contained_by{$inner} = {} unless defined $contained_by{$inner};
    ${$contained_by{$inner}}{$outer} = 1 if $count > 0;
  }
}
# print "INNER\n", Dumper(\%contained_by);

# The answer is the set of bags reachable in the inverted graph, starting
# at shiny gold.
# Key is a reachable bag, value is 1.
my %reachable = %{$contained_by{'shiny gold'}};
my $unstable = 1;
while ($unstable) {
  $unstable = 0;
  foreach my $bag (keys %reachable) {
    while (my ($next,$count) = each %{$contained_by{$bag}}) {
      unless (defined $reachable{$next}) {
        $unstable = 1;
        $reachable{$next} = 1;
      }
    }
  }
}
my @can_eventually_contain = keys %reachable;
print "Your shiny gold bag can be contained in ", $#can_eventually_contain + 1, " kinds of bags:\n   ", join(', ', @can_eventually_contain), "\n";
exit 0;
