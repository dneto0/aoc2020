#!/usr/bin/env perl
# Copyright 2020 David Neto
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;

sub key($$$) {
  my ($x,$y,$z) = @_;
  return "$x $y $z";
}

# Keys are string-mapped coordinates. Value is 0 or undef, for dead 1 for live.
my %world = ();
my $y = 0;
my $x;
foreach my $line (<>) {
  chomp $line;
  $x = 0;
  foreach my $ch (split(//,$line)) {
    $world{key($x,$y,0)} = ($ch eq '.') ? 0 : 1;
    $x++;
  }
  $y++;
}
my $max_x = $x-1;
my $max_y = $y-1;
my $max_z = 0;

my $boundary = 1;

# Update %world by taking a step, and increase $boundary by 1.
# Only active cells will have a definition.
sub takestep() {
  my %new_world = ();
  foreach my $x ( (-$boundary)..($max_x+$boundary) ) {
  foreach my $y ( (-$boundary)..($max_y+$boundary) ) {
  foreach my $z ( (-$boundary)..($max_z+$boundary) ) {

  # Count active cubes in the neighbourhood
  my $num_active = 0;
  for my $dx ( -1..1 ){
  for my $dy ( -1..1 ){
  for my $dz ( -1..1 ){
    unless ($dx == 0 and $dy == 0 and $dz == 0) {
      $num_active += 1 if $world{key($x+$dx,$y+$dy,$z+$dz)} == 1;
    }
  }
  }
  }

  # Update rule.
  my $here = key($x,$y,$z);
  if ($world{$here} == 1) {
    if ($num_active == 2 or $num_active == 3) {
      $new_world{$here} = 1;
    }
  } else {
    if ($num_active == 3) {
      $new_world{$here} = 1;
    }
  }

  }
  }
  }
  %world = %new_world;
  $boundary++;
}

foreach my $i (0..5) {
  takestep();
}

my @keys = keys %world;
print $#keys+1, "\n";
