#!/usr/bin/env perl
# Copyright 2020 David Neto
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;

# The instruction opcodes, indexed by position
my @opcode = ();
# The instruction parameter, indexed by position
my @offset = ();


foreach my $line (<>) {
  if ($line =~ m/^(\S+)\s+([+-]\d+)/) {
    push @opcode, $1;
    push @offset, $2 + 0;
  }
}

my $status_terminate = 0;
my $status_infinite_loop = 1;
# Runs the program, and returns a tuple:
#   status: one of the two status values above.
#   accum: value of the accumulator at termination
sub run($) {
  # Index of instruction to be flipped.
  my ($index) = (@_);
  my @local_opcode = @opcode;

  my $old_opcode = $local_opcode[$index];
  $local_opcode[$index] = 'nop' if $old_opcode eq 'jmp';
  $local_opcode[$index] = 'jmp' if $old_opcode eq 'nop';

  # visit_count[i] is the number of times instruction i has
  # been visited
  my @visit_count = map { 0 } (@opcode);
  my $accum = 0;
  my $ip = 0; # Instruction pointer

  while ($ip != $#local_opcode) {
    if ($visit_count[$ip] >= 1) {
      return ($status_infinite_loop,$accum);
    }
    $visit_count[$ip]++;
    if ($local_opcode[$ip] eq 'nop') {
      $ip++;
    } elsif ($local_opcode[$ip] eq 'jmp') {
      $ip += $offset[$ip];
    } elsif ($local_opcode[$ip] eq 'acc') {
      $accum += $offset[$ip];
      $ip++;
    }
  }
  return ($status_terminate,$accum);
}

my $i = 0;
my $accum = undef;
while ($i <= $#opcode) {
  my ($status,$the_accum) = run($i);
  $accum = $the_accum;
  last if ($status == $status_terminate);
  $i++;
}

print "Replacing instruction $i terminates with accumulator at $accum\n";

exit 0;
