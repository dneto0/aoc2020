#!/usr/bin/env perl
# Copyright 2020 David Neto
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use Data::Dumper;

my $mask = undef;
my %memory = ();
foreach my $line (<>) {
  chomp $line;
  if ($line =~ m/^mask\s*=\s*([X10]+)/) {
    $mask = $1;
    print "mask $mask\n";
  } elsif ($line =~ m/^mem\[(\d+)\]\s*=\s*(\d+)/) {
    my ($addr, $value) = ($1, $2);
    print "mem[$addr] ...  $value\n";
    my $i = 0;
    my @bits = split(//, $mask);
    my @xbits = ();
    for ($i = $#bits; $i >= 0; $i--) {
      my $bit = $bits[$i];
      my $bit_value = 1 << ($#bits - $i);
      if ($bit eq 'X') {
        $addr = ($addr - $bit_value) if ($addr & $bit_value);
        push @xbits, $bit_value;
      }
      if ($bit eq '1') {
        $addr = $addr | $bit_value;
      }
    }
    #print "  base $addr\n";
    #print Dumper(\@xbits);
    # Addr is the base address.
    # Now iterate through all floating addresses.
    my $max = (1 << (1+$#xbits))-1;
    foreach my $word (0..$max) {
      my $effective = $addr;
      my $j;
      foreach ($j = 0; $j <= $#xbits; $j++) {
        my $bit_value = 1 << $j;
        $effective += $xbits[$j] if ($word & $bit_value);
      }
      #print "     [$effective] <- $value\n";
      $memory{$effective} = $value;
    }
  }
}
print Dumper(\%memory);

my $sum = 0;
foreach my $value (values %memory) {
  $sum += $value;
}
print "sum $sum\n";
